@page "/profile"
@inject FirebaseAuthService AuthService
@inject NavigationManager NavigationManager
@using AdminHomeSync.Components.Model
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@rendermode InteractiveServer
@inherits AuthenticatedPage
@inject IJSRuntime JSRuntime
@inject HttpClient HttpClient

<div class="profile-page">
    <div class="profile-container">
        <p class="top-header">Profile</p>
        <div class="top-box">
            <div class="top-box-left">
                @if (userProfile != null)
                {
                    <p class="top-name">@userProfile.FirstName @userProfile.LastName</p>
                }
                else
                {
                    <p style="line-height: normal; margin: 0px">Loading...</p>
                    <!-- Show loading text while waiting for the profile -->
                }
                <p class="top-sub">Name</p>
            </div>
            <div class="top-box-right">
                <button class="logout" @onclick="Logout">
                    <img src="icon/logout.svg" alt="Logout Logo" class="logout-icon" />
                    Logout
                </button>
            </div>
        </div>

        <div class="bottom-part">
            <p class="bottom-header">Personal Information</p>
            <div class="bottom-box">
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-birthdate.svg" alt="Birthdate Logo" class="birthdate-icon" />
                    </div>
                    <div class="text-content">
                        @if (userProfile != null)
                        {
                            <p class="top-text">@userProfile.Birthdate</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Birthdate</p>
                    </div>
                </div>
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-sex.svg" alt="Sex Logo" class="sex-icon" />
                    </div>
                    <div class="text-content">
                        @if (userProfile != null)
                        {
                            <p class="top-text">@userProfile.Sex</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Sex</p>
                    </div>
                </div>
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-email.svg" alt="Email Logo" class="email-icon" />
                    </div>
                    <div class="text-content">
                        @if (userProfile != null)
                        {
                            <p class="top-text">@userProfile.Email</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Email</p>
                    </div>
                </div>
            </div>
            <button class="delete-account-button" @onclick="DeleteAccount">
                Delete My Account
            </button>
        </div>
    </div>
</div>

@code {
    private UserData userProfile;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                Console.WriteLine("Fetching user profile from localStorage...");
                userProfile = await localStorage.GetItemAsync<UserData>("userProfile");

                if (userProfile == null)
                {
                    Console.WriteLine("No user profile found in localStorage.");
                }
                else
                {
                    Console.WriteLine("User profile retrieved: " + userProfile.FirstName);
                }

                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error retrieving user profile: {ex.Message}");
            }
        }
    }

    private async Task DeleteAccount()
    {
        var confirmed = await JSRuntime.InvokeAsync<bool>("window.confirm", new object[] { "Are you sure you want to delete your account? This action cannot be undone." });

        if (confirmed)
        {
            try
            {
                // Retrieve the user ID from localStorage
                var userId = await localStorage.GetItemAsync<string>("userId");
                if (userId == null)
                {
                    await JSRuntime.InvokeVoidAsync("alert", new object[] { "User not found. Please log in again." });
                    return;
                }

                var idToken = await localStorage.GetItemAsync<string>("authToken");

                // Delete the user's authentication info
                var deleteAuthResult = await AuthService.DeleteUserAccountAsync(idToken);
                if (!deleteAuthResult)
                {
                    await JSRuntime.InvokeVoidAsync("alert", new object[] { "Failed to delete user from Authentication. Please try again." });
                    return;
                }

                // Delete the user's data from the database (including the users and activity node)
                var deleteDbResult = await AuthService.DeleteUserDataFromDatabaseAsync(userId);
                if (!deleteDbResult)
                {
                    await JSRuntime.InvokeVoidAsync("alert", new object[] { "Failed to delete user from Database. Please try again." });
                    return;
                }

                // Remove the user's profile and authentication token from localStorage
                await localStorage.RemoveItemAsync("userProfile");
                await localStorage.RemoveItemAsync("authToken");
                await localStorage.RemoveItemAsync("userId");

                // Log out the user (clear session data)
                await Logout();

                // Redirect to the login page
                NavigationManager.NavigateTo("/", true);
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", new object[] { $"An error occurred while deleting the account: {ex.Message}" });
            }
        }
    }


    private async Task Logout()
    {
        try
        {
            // Retrieve user details before clearing them
            var userId = await localStorage.GetItemAsync<string>("userId");
            var email = userProfile?.Email;
            var firstName = userProfile?.FirstName;
            var lastName = userProfile?.LastName;

            if (userId != null && email != null && firstName != null && lastName != null)
            {
                // Call LogAdminLogoutActivityAsync in FirebaseAuthService
                await AuthService.LogAdminLogoutActivityAsync(userId, email, firstName, lastName);
            }

            // Remove all related items from localStorage
            await localStorage.RemoveItemAsync("userProfile");
            await localStorage.RemoveItemAsync("authToken");
            await localStorage.RemoveItemAsync("userId");

            userProfile = null;

            // Redirect to the login page
            NavigationManager.NavigateTo("/", true);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error during logout: {ex.Message}");
        }
    }
}

