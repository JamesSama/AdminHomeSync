@page "/profile"
@inject FirebaseAuthService FirebaseAuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Profile</PageTitle>

<div class="profile-page">
    <div class="profile-container">
        <p class="top-header">Profile</p>
        <div class="top-box">
            <div class="top-box-left">
                @if (profile != null)
                {
                    <p class="top-name">@profile.FirstName @profile.LastName</p>
                }
                else
                {
                    <p style="line-height: normal; margin: 0px">Loading...</p>
                    <!-- Show loading text while waiting for the profile -->
                }
                <p class="top-sub">Name</p>
            </div>
            <div class="top-box-right">
                <button class="logout" @onclick="Logout">
                    <img src="icon/logout.svg" alt="Logout Logo" class="logout-icon" />
                    Logout
                </button>
            </div>
        </div>

        <div class="bottom-part">
            <p class="bottom-header">Personal Information</p>
            <div class="bottom-box">
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-birthdate.svg" alt="Birthdate Logo" class="birthdate-icon" />
                    </div>
                    <div class="text-content">
                        @if (profile != null)
                        {
                            <p class="top-text">@profile.Birthdate</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Birthdate</p>
                    </div>
                </div>
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-sex.svg" alt="Sex Logo" class="sex-icon" />
                    </div>
                    <div class="text-content">
                        @if (profile != null)
                        {
                            <p class="top-text">@profile.Sex</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Sex</p>
                    </div>
                </div>
                <div class="box-item">
                    <div class="logo-container">
                        <img src="icon/web-profile-email.svg" alt="Email Logo" class="email-icon" />
                    </div>
                    <div class="text-content">
                        @if (profile != null)
                        {
                            <p class="top-text">@profile.Email</p>
                        }
                        else
                        {
                            <p style="line-height: normal; margin: 0px">Loading...</p>
                            <!-- Show loading text while waiting for the profile -->
                        }
                        <p class="bot-text">Email</p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private UserData profile; // Profile data is initially null

    // Define the UserData class used in Profile.razor
    public class UserData
    {
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string Birthdate { get; set; }
        public string Sex { get; set; }
        public string Email { get; set; }
    }

    private bool isNavigationRequired = false;

    // This is called when the page initializes
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var currentUser = FirebaseAuthService.GetCurrentUser();
            if (currentUser == null)
            {
                isNavigationRequired = true;
                return;
            }

            // Map data from FirebaseAuthService.UserData to Profile.UserData
            profile = new UserData
                {
                    FirstName = currentUser.FirstName,
                    LastName = currentUser.LastName,
                    Birthdate = currentUser.Birthdate,
                    Sex = currentUser.Sex,
                    Email = currentUser.Email
                };

            StateHasChanged(); // Trigger a re-render to update the UI with the profile data
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching profile: {ex.Message}");
            isNavigationRequired = true;
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && isNavigationRequired)
        {
            try
            {
                Navigation.NavigateTo("/profile");
            }
            catch (NavigationException navEx)
            {
                Console.WriteLine($"Navigation failed: {navEx.Message}");
            }
        }
    }

    private void Logout()
    {
        FirebaseAuthService.Logout();
        Navigation.NavigateTo("/");
    }
}
