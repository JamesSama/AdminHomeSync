@page "/signup"
@inject FirebaseAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Admin Signup</PageTitle>

<div class="signup-page">
    <div class="left-section">
        <div class="left-section-header">
            <div class="glow">
                <div class="logo-container">
                    <img src="images/Logo_1 2.png" alt="HomeSync Logo" class="logo">
                </div>
            </div>
            <p class="header-caption">Create an account.</p>
        </div>
        <img src="images/signup-web-illustration.png" alt="Login Illustration" class="illustration-image">
    </div>

    <div class="right-section">
        <img src="images/signup-illustration 2.png" alt="Signup Top Image" class="signup-person">

        <div class="signup-container">
            <form @onsubmit="HandleSignUp">
                <div class="input-group">
                    <label for="first-name">First Name</label>
                    <input type="text" id="first-name" @bind="FirstName" placeholder="First Name" required>
                </div>
                <div class="input-group">
                    <label for="last-name">Last Name</label>
                    <input type="text" id="last-name" @bind="LastName" placeholder="Last Name" required>
                </div>
                <div class="input-group">
                    <label for="sex">Sex</label>
                    <select id="sex" @bind="Sex" required>
                        <option value="" disabled selected>Sex</option>
                        <option value="Male">Male</option>
                        <option value="Female">Female</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="birthdate">Birthdate</label>
                    <input type="date" id="birthdate" @bind="Birthdate" required>
                </div>
                <div class="input-group">
                    <label for="email">Email Address</label>
                    <input type="email" id="email" @bind="Email" placeholder="Email Address" required />
                    <span class="input-icon">
                        <img src="icon/email.svg" alt="Email-Icon" class="icon" />
                    </span>
                </div>
                <div class="input-group">
                    <label for="password">Password</label>

                    <input type="@PasswordFieldType" 
                           id="password" 
                           @bind="Password" 
                           placeholder="Password" required />
                    <span class="input-icon"
                          @onclick="TogglePasswordVisibility"
                          style="cursor: pointer;">
                        @if (IsPasswordVisible)
                        {
                            <img src="icon/eye-off.svg" alt="Hide Password" class="icon-pass" />
                        }
                        else
                        {
                            <img src="icon/eye-on.svg" alt="Show Password" class="icon-pass" />
                        }
                    </span>

                </div>
                <button type="submit" class="create-account-button">Create Account</button>
            </form>

            <!-- Error or success message display -->
            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error">@ErrorMessage</div>
            }

            @if (SignUpSuccess)
            {
                <div class="success">Sign-up successful! Redirecting to login.</div>
            }
        </div>
    </div>
</div>

@code {
    private string FirstName { get; set; }
    private string LastName { get; set; }
    private string Sex { get; set; }
    private DateTime Birthdate { get; set; }
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }
    private bool SignUpSuccess { get; set; } = false;
    private bool IsPasswordVisible { get; set; } = false;

    // Dynamically determines the password field type based on visibility
    private string PasswordFieldType => IsPasswordVisible ? "text" : "password";

    private async Task HandleSignUp()
    {
        ErrorMessage = string.Empty;
        SignUpSuccess = false;

        // Simple field validation (ensure all fields are filled in)
        if (string.IsNullOrWhiteSpace(FirstName) || string.IsNullOrWhiteSpace(LastName) ||
            string.IsNullOrWhiteSpace(Sex) || Birthdate == DateTime.MinValue ||
            string.IsNullOrWhiteSpace(Email) || string.IsNullOrWhiteSpace(Password))
        {
            ErrorMessage = "Please fill in all required fields.";
            return;
        }

        try
        {
            // Call Firebase Authentication service for sign-up
            var response = await AuthService.SignUpAsync(Email, Password, FirstName, LastName, Sex);

            // Format the birthdate
            string formattedBirthdate = Birthdate.ToString("MMMM dd, yyyy");

            // Prepare user data to store in Realtime Database
            var userData = new
            {
                Birthdate = formattedBirthdate,
                Email,
                FirstName,
                LastName,
                Role = "Admin",  // Default role for new users
                Sex,
                UserId = response.LocalId
            };

            // Add user data to Firebase Realtime Database
            await AuthService.AddUserToDatabaseAsync(response.LocalId, userData, response.IdToken);

            // Indicate success
            SignUpSuccess = true;

            // Redirect to the login page after a short delay
            await Task.Delay(2000);
            Navigation.NavigateTo("/"); // Redirect to login page after successful sign-up
        }
        catch (Exception ex)
        {
            // Handle specific error messages from Firebase
            if (ex.Message.Contains("EMAIL_EXISTS"))
            {
                ErrorMessage = "This email address is already registered. Please use a different email.";
            }
            else
            {
                ErrorMessage = $"Sign-up failed: {ex.Message}";
            }
        }
    }

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }
}
