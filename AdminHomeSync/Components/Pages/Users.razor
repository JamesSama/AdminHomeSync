@page "/users"
@using AdminHomeSync.Components.Services
@inject IUserService UserService
@inject IJSRuntime JSRuntime
@rendermode InteractiveServer

<PageTitle>Users</PageTitle>

<div class="user-section">
    <div class="user-outer-box">
        <h3>Users</h3>

        <div class="user-page">
            <div class="top-row">
                <div class="filter-options">
                    <button @onclick="ShowAllUsers">All</button>
                    <button @onclick="ShowUsers">Users</button>
                    <button @onclick="ShowAdmins">Admin</button>
                </div>

                <div class="search-container">
                    <div class="search-bar">
                        <img class="search-icon" src="/icon/search.svg" alt="Search Icon" />
                        <input type="text" @bind="searchTerm" @oninput="OnSearchInput" placeholder="Search" />
                    </div>
                </div>
            </div>

            <div class="table-main-container">
                <div class="user-table-box">
                    <div class="user-table">
                        <table>
                            <thead>
                                <tr>
                                    <th>#</th>
                                    <th>Users</th>
                                    <th>Role</th>
                                    <th>Last Login</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var user in filteredUsers)
                                {
                                    <tr>
                                        <td>@user.SequentialId</td>
                                        <td>@user.Name</td>
                                        <td>@user.Role</td>
                                        <td>@latestLoginDictionary.GetValueOrDefault(user.UserId, "Loading...")</td>
                                        <td>
                                            @if (user.Role == "User")
                                            {
                                                <button class="delete-button" @onclick="() => DeleteUser(user.UserId)">Delete
                                                    User</button>
                                            }
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<User> users = new List<User>();
    private List<User> filteredUsers = new List<User>();
    private string searchTerm = string.Empty;
    private string roleFilter = "all"; // Default to "all", show all users
    private Dictionary<string?, string> latestLoginDictionary = new Dictionary<string, string>();

    protected override async Task OnInitializedAsync()
    {
        // Load all users when the page is initialized
        users = await UserService.GetUsersAsync();
        filteredUsers = users;

        // Fetch the latest login for each user
        foreach (var user in users)
        {
            var latestLogin = await UserService.GetLatestLoginForUserAsync(user.UserId);
            latestLoginDictionary[user.UserId] = latestLogin;
        }
    }

    private async Task OnSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await FilterUsersAsync();
    }

    private async Task FilterUsersAsync()
    {
        // Apply both search term and role filter
        var filteredByRole = roleFilter == "all"
        ? users
        : users.Where(u => u.Role.Equals(roleFilter, StringComparison.OrdinalIgnoreCase)).ToList();

        // Apply search filter if search term is not empty
        if (!string.IsNullOrEmpty(searchTerm))
        {
            filteredByRole = filteredByRole.Where(u => u.Name.Contains(searchTerm, StringComparison.OrdinalIgnoreCase)).ToList();
        }

        filteredUsers = filteredByRole;
        StateHasChanged();
    }

    private async Task ShowAllUsers()
    {
        roleFilter = "all"; // Reset to all users
        await FilterUsersAsync();
    }

    private async Task ShowUsers()
    {
        roleFilter = "User"; // Filter only regular users
        await FilterUsersAsync();
    }

    private async Task ShowAdmins()
    {
        roleFilter = "Admin"; // Filter only admins
        await FilterUsersAsync();
    }

    private async Task DeleteUser(string userId)
    {
        var userToDelete = users.FirstOrDefault(u => u.UserId == userId);

        if (userToDelete != null)
        {
            // Use JavaScript interop to confirm deletion with the user's name
            var confirmed = await JSRuntime.InvokeAsync<bool>("confirm", $"Are you sure you want to delete {userToDelete.Name}?");

            if (confirmed)
            {
                // Proceed with deletion if confirmed
                var success = await UserService.DeleteUserAsync(userId);
                if (success)
                {
                    // Show success message in alert
                    await JSRuntime.InvokeVoidAsync("alert", $"User {userToDelete.Name} deleted successfully.");
                    users = await UserService.GetUsersAsync(); // Refresh users after deletion
                    filteredUsers = users;
                    await FilterUsersAsync(); // Reapply the current filters after deletion
                }
                else
                {
                    // Show failure message in alert
                    await JSRuntime.InvokeVoidAsync("alert", $"Error deleting user {userToDelete.Name}. Please try again.");
                }
            }
        }
    }
}
