@page "/dashboard"
@using AdminHomeSync.Components.Services
@using AdminHomeSync.Components.Model
@using System.Globalization
@inject IJSRuntime JS
@inject IUserService UserService
@inject DeviceService DeviceService
@inject ActivityService ActivityService
@inject NotificationService NotificationService
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage
@inject NavigationManager NavigationManager
@inherits AuthenticatedPage
@rendermode InteractiveServer

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-page">
    <div class="dashcard">
        <div class="dashtitle">
            <strong>Welcome, Admin!</strong>
            <p>@displayedDate</p>
        </div>
        <div class="grid-container">
            <div class="column left-column">
                <div class="box">
                    <div class="box-header">
                        <div class="header-left">
                            <img src="icon/nav-activity.svg" alt="Activity Icon" class="icon-act" />
                            <div>Recent Activities</div>
                        </div>
                        <a href="/activity" class="nav-link">See all</a>
                    </div>
                    <div class="box-content-container">
                        @if (activities != null && activities.Any())
                        {
                            @foreach (var activity in activities)
                            {
                                <div class="box-content">
                                    <p class="left-act">@activity.Action: @activity.UserName</p>
                                    <p>@activity.DateTime.ToString("MMMM d, yyyy • h:mm tt")</p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="message-load-container">
                                <p>Lading recent activities...</p>
                            </div>
                        }
                    </div>
                </div>
                <div class="box">
                    <div class="box-header">
                        <div class="header-left">
                            <img src="icon/nav-notification.svg" alt="Notification Icon" class="icon-notif" />
                            <div>Notifications</div>
                        </div>
                        <a href="/notification" class="nav-link">See all</a>
                    </div>
                    <div class="box-content-container">
                        @if (notifications != null && notifications.Any())
                        {
                            @foreach (var notification in notifications)
                            {
                                <div class="box-content">
                                    <p class="left-notif">@notification.Message</p>
                                    <p>@notification.FullDateTime</p> <!-- Use FullDateTime for consistent formatting -->
                                </div>
                            }
                        }
                        else
                        {
                            <div class="message-load-container">
                                <p>Loading notifications...</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="column right-column">
                <div class="box box3">
                    <img src="images/dashboard-illustration 1.png" alt="Dashboard Image" />
                </div>
                <a class="buttons" href="/users">
                    <div class="box box4">
                        <div class="leftboxes">
                            <img src="icon/nav-users.svg" alt="Users Icon" class="icon-users" />
                            Users
                        </div>
                        <div class="rightboxes">@(summation?.TotalUsers ?? 0)</div>
                    </div>
                </a>
                <a class="buttons" href="/devices">
                    <div class="box box5">
                        <div class="leftboxes">
                            <img src="icon/nav-devices.svg" alt="Devices Icon" class="icon-devices" />
                            Connected Devices
                        </div>
                        <div class="rightboxes">@connectedDevicesCount</div>
                    </div>
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private List<NotificationService.NotificationItem> notifications = new();
    private List<UserActivity> activities = new List<UserActivity>();
    private UserSummation? summation;
    private int connectedDevicesCount;
    private string displayedDate = string.Empty;
    private string displayedTime = string.Empty;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Check if a session exists in local storage
            var userProfile = await LocalStorage.GetItemAsync<UserData>("userProfile");

            if (userProfile == null)
            {
                // If there's no active session, redirect to the login page
                NavigationManager.NavigateTo("/", true); // true forces a full reload
                return; // Prevent further execution
            }

            // Proceed with the regular initialization of the dashboard
            if (OperatingSystem.IsBrowser()) // WebAssembly (client-side)
            {
                // Fetch client (browser) date and time via JavaScript
                await JS.InvokeVoidAsync("getCurrentDateTime", DotNetObjectReference.Create(this));
            }
            else // Blazor Server (server-side)
            {
                // Fetch server date and time separately
                var now = DateTime.Now;
                displayedDate = now.ToString("MMMM d, yyyy"); // Date format: "Month Day, Year"
                displayedTime = now.ToString("hh:mm tt"); // Time format: "hh:mm:ss AM/PM"
            }

            try
            {
                summation = await UserService.GetUserSummationAsync();
            }
            catch (Exception)
            {
                summation = null;
            }

            try
            {
                // Fetch recent activities from Firebase and sort by DateTime
                activities = (await ActivityService.FetchActivitiesFromFirebase())
                .OrderByDescending(a => a.DateTime)
                .ToList();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching activities: {ex.Message}");
                activities = new List<UserActivity>();
            }

            try
            {
                // Fetch user devices
                var userDevices = await DeviceService.GetDevicesDataAsync();

                // Calculate summary counts
                connectedDevicesCount = userDevices.Sum(d =>
                (d.Lights.IsConnected ? 1 : 0) +
                (d.Fan.IsConnected ? 1 : 0) +
                (d.MotionSensor.IsConnected ? 1 : 0));
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user devices: {ex.Message}");
                connectedDevicesCount = 0;
            }

            try
            {
                // Fetch all notifications initially
                notifications = await NotificationService.GetAllNotificationsAsync();

                // Sort notifications by the latest date at the top
                notifications = notifications.OrderByDescending(n => ParseDateTime(n.Date, n.Time)).ToList();

                // Start listening for real-time updates
                NotificationService.ListenForAllNotifications(OnNewNotification);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error loading notifications: {ex.Message}");
                notifications = new List<NotificationService.NotificationItem>();
            }

            StateHasChanged(); // Re-render the component if data is fetched
        }
    }

    private void OnNewNotification(NotificationService.NotificationItem notification)
    {
        InvokeAsync(() =>
        {
            // Insert the new notification at the top
            notifications.Insert(0, notification);

            // Sort notifications by the latest date at the top (again after insertion)
            notifications = notifications.OrderByDescending(n => ParseDateTime(n.Date, n.Time)).ToList();
        });
    }

    private DateTime ParseDateTime(string date, string time)
    {
        var combinedDateTime = $"{date} {time}";
        if (DateTime.TryParseExact(
        combinedDateTime,
        new[] { "MMMM d, yyyy h:mm tt", "MMM d, yyyy h:mm tt" },
        CultureInfo.InvariantCulture,
        DateTimeStyles.None,
        out DateTime parsedDateTime))
        {
            return parsedDateTime;
        }

        return DateTime.MinValue;
    }

    [JSInvokable]
    public void UpdateClientDateTime(string date, string time)
    {
        displayedDate = date;
        displayedTime = time;
    }
}