@page "/dashboard"
@using AdminHomeSync.Components.Services
@inject IJSRuntime JS
@inject IUserService UserService
@inject DeviceService DeviceService /*for calling connected devices*/
@inject NotificationService NotificationService /*for logging notification messages*/
@using static AdminHomeSync.Components.Services.NotificationService
@inject NavigationManager NavigationManager /*REMOVE LATER*/

<PageTitle>Dashboard</PageTitle>

<div class="dashboard-page">
    <div class="dashcard">
        <div class="dashtitle">
            <strong>Welcome, Admin {username}!</strong>
            <p>@displayedDate</p>
        </div>
        <div class="grid-container">
            <div class="column left-column">
                <div class="box">
                    <div class="box-header">
                        <div class="header-left">
                            <img src="icon/nav-activity.svg" alt="Activity Icon" class="icon-act" />
                            <div>Recent Activity</div>
                        </div>
                        <a href="/activity" class="nav-link">See all</a>
                    </div>
                    <div class="box-content-container">
                        @foreach (var activity in activities)
                        {
                            <div class="box-content">
                                <p class="left-act">@activity.Action: @activity.UserName</p>
                                <p>@activity.Date.ToString("MMMM d, yyyy • hh:mm tt")</p> <!-- Format DateTime -->
                            </div>
                        }
                    </div>
                </div>
                <div class="box">
                    <div class="box-header">
                        <div class="header-left">
                            <img src="icon/nav-notification.svg" alt="Notification Icon" class="icon-notif" />
                            <div>Notifications</div>
                        </div>
                        <a href="/notification" class="nav-link">See all</a>
                    </div>
                    <div class="box-content-container">
                        @if (notifications != null && notifications.Any())
                        {
                            @foreach (var notification in notifications)
                            {
                                <div class="box-content">
                                    <p class="left-notif">@notification.Message</p>
                                    <p>@notification.Date</p>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="no-notif-container">
                                <p>No notifications to display...</p>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="column right-column">
                <div class="box box3">
                    <img src="images/dashboard-illustration 1.png" alt="Dashboard Image" />
                </div>
                <a class="buttons" href="/users">
                    <div class="box box4">
                        <div class="leftboxes">
                            <img src="icon/nav-users.svg" alt="Users Icon" class="icon-users" />
                            Users
                        </div>
                        <div class="rightboxes">@(summation?.TotalUsers ?? 0)</div>
                    </div>
                </a>
                <a class="buttons" href="/devices">
                    <div class="box box5">
                        <div class="leftboxes">
                            <img src="icon/nav-devices.svg" alt="Devices Icon" class="icon-devices" />
                            Connected Devices
                        </div>
                        <div class="rightboxes">@connectedDevicesCount</div>
                    </div>
                </a>
            </div>
        </div>
    </div>
</div>

@code {
    private List<AdminHomeSync.Components.Services.UserDevice> userDevices = new List<AdminHomeSync.Components.Services.UserDevice>();
    private UserSummation? summation; 
    private int connectedDevicesCount;
    private List<UserActivity> activities = new List<UserActivity>(); //REMOVE LATER, Initialize with mock data
    private string displayedDate = string.Empty;
    private string displayedTime = string.Empty;
    private List<NotificationItem>? notifications;

    private bool isDashboardPage; /*REMOVE LATER*/

    protected override async Task OnInitializedAsync()
    {
        if (OperatingSystem.IsBrowser()) // WebAssembly (client-side)
        {
            // Fetch client (browser) date and time via JavaScript
            await JS.InvokeVoidAsync("getCurrentDateTime", DotNetObjectReference.Create(this));
        }
        else // Blazor Server (server-side)
        {
            // Fetch server date and time separately
            var now = DateTime.Now;
            displayedDate = now.ToString("MMMM d, yyyy"); // Date format: "Month Day, Year"
            displayedTime = now.ToString("hh:mm tt"); // Time format: "hh:mm:ss AM/PM"
        }

        isDashboardPage = NavigationManager.Uri.Contains("/");/*REMOVE LATER*/

        try
        {
            summation = await UserService.GetUserSummationAsync();
        }
        catch (Exception)
        {
            summation = null;
        }

        if (!isDashboardPage)
        {
            // Fetch devices data from DeviceService
            userDevices = await DeviceService.GetDevicesDataAsync();

            // Calculate summary counts
            connectedDevicesCount = userDevices.Sum(d => (d.Lights.IsConnected ? 1 : 0) + (d.Fan.IsConnected ? 1 : 0) +
            (d.MotionSensor.IsConnected ? 1 : 0));
        }

        // Mock activity data directly in OnInitializedAsync
        activities = new List<UserActivity>
        {
            new UserActivity("Meow M. Meow", "Admin", "Logged In", "Success", DateTime.Now),
            new UserActivity("Jobert Tenio Batumbakal", "User", "Logged Out", "Success", DateTime.Now),
            new UserActivity("Bentong", "User", "New User", "Success", DateTime.Now),
            new UserActivity("Meow M. Meow", "Admin", "Logged In", "Success", DateTime.Now),
            new UserActivity("Jobert Tenio Batumbakal", "User", "Logged Out", "Success", DateTime.Now),
            new UserActivity("Bentong", "User", "New User", "Success", DateTime.Now)
        };

        notifications = NotificationService.GetNotifications();
    }

    [JSInvokable]
    public void UpdateClientDateTime(string date, string time)
    {
        displayedDate = date;
        displayedTime = time;
    }


    /*REMOVE LATER, pang mock data lang*/
    public class UserActivity
    {
        public string UserName { get; }
        public string Role { get; }
        public string Action { get; }
        public string Status { get; }
        public DateTime Date { get; }

        // Constructor
        public UserActivity(string userName, string role, string action, string status, DateTime date)
        {
            UserName = userName;
            Role = role;
            Action = action;
            Status = status;
            Date = date;
        }
    }

}

