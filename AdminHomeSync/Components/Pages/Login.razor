@page "/"
@using Firebase.Auth
@inject FirebaseAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Admin Login</PageTitle>

<div class="login-page">
    <div class="left-section">
        <div class="left-section-header">
            <div class="glow">
                <div class="logo-container">
                    <img src="images/Logo_1 2.png" alt="HomeSync Logo" class="logo">
                </div>
            </div>
            <p class="header-caption">Connected living, perfectly in sync.</p>
        </div>
        <img src="images/login-web-illustration.png" alt="Login Illustration" class="illustration-image">
    </div>

    <div class="right-section">
        <img src="images/login-illustration 1.png" alt="Decorative Light" class="decorative-light">
        <div class="login-form-container">
            <h1>Login</h1>

            <form @onsubmit="HandleLogin">
                <div class="input-group">
                    <input type="email" @bind="Email" placeholder="Email" required />
                    <span class="input-icon">
                       <img src="icon/email.svg" alt="Email-Icon" class="icon" />
                    </span>
                </div>
                <div class="input-group">
                    <input type="@PasswordFieldType"
                           @bind="Password"
                           placeholder="Password"
                           required />
                    <span class="input-icon"
                          @onclick="TogglePasswordVisibility"
                          style="cursor: pointer;">
                        @if (IsPasswordVisible)
                        {
                            <img src="icon/eye-off.svg" alt="Hide Password" class="icon-pass" />
                        }
                        else
                        {
                            <img src="icon/eye-on.svg" alt="Show Password" class="icon-pass" />
                        }
                    </span>
                </div>

                <button type="submit" class="login-button">Login</button>

                <div class="divider-container">
                    <span class="line"></span>
                    <span class="divider">or</span>
                    <span class="line"></span>
                </div>
                <button type="button" class="create-account-button" @onclick="NavigateToSignup">
                    Create an account
                </button>
            </form>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error">@ErrorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }
    private bool IsPasswordVisible { get; set; } = false;

    // Dynamically determines the password field type based on visibility
    private string PasswordFieldType => IsPasswordVisible ? "text" : "password";

    private async Task HandleLogin()
    {
        ErrorMessage = string.Empty;

        try
        {
            var response = await AuthService.SignInWithEmailAndPasswordAsync(Email, Password);
            Console.WriteLine($"Login successful! Token: {response.IdToken}");

            Navigation.NavigateTo("/dashboard");
        }
        catch (FirebaseAuthException firebaseEx)
        {
            ErrorMessage = firebaseEx.Message.Contains("INVALID_EMAIL") ?
                           "Invalid email format." :
                           firebaseEx.Message.Contains("USER_NOT_FOUND") ?
                           "No account found with this email." :
                           firebaseEx.Message.Contains("WRONG_PASSWORD") ?
                           "Incorrect password." :
                           firebaseEx.Message.Contains("USER_DISABLED") ?
                           "This account has been disabled." :
                           "Login failed. Please try again.";
        }
        catch (Exception ex)
        {
            ErrorMessage = "Invalid Credentials. Please try again.";
            Console.WriteLine($"Exception caught: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }

    private void NavigateToSignup()
    {
        Navigation.NavigateTo("/signup");
    }

    private void TogglePasswordVisibility()
    {
        IsPasswordVisible = !IsPasswordVisible;
    }
}
