@page "/"
@using Firebase.Auth
@inject FirebaseAuthService AuthService
@inject NavigationManager Navigation
@rendermode InteractiveServer

<PageTitle>Admin Login</PageTitle>

<div class="login-page">
    <div class="left-section">
        <div class="left-section-header">
            <div class="glow">
                <div class="logo-container">
                    <img src="images/Logo_1 2.png" alt="HomeSync Logo" class="logo">
                </div>
            </div>
            <p class="header-caption">Connected living, perfectly in sync.</p>
        </div>
        <img src="images/login-web-illustration.png" alt="Login Illustration" class="illustration-image">
    </div>

    <div class="right-section">
        <img src="images/login-illustration 1.png" alt="Decorative Light" class="decorative-light">
        <div class="login-form-container">
            <h1>Login</h1>
            <form @onsubmit="HandleLogin">
                <div class="input-group">
                    <input type="email" @bind="Email" placeholder="Email" required />
                    <span class="input-icon email-icon"></span>
                </div>
                <div class="input-group">
                    <input type="password" @bind="Password" placeholder="Password" required />
                    <span class="input-icon password-icon"></span>
                </div>
                <button type="submit" class="login-button">Login</button>

                <div class="divider-container">
                    <span class="line"></span>
                    <span class="divider">or</span>
                    <span class="line"></span>
                </div>
                <button type="button" class="create-account-button" @onclick="NavigateToSignup">Create an
                    account</button>
            </form>

            @if (!string.IsNullOrEmpty(ErrorMessage))
            {
                <div class="error">@ErrorMessage</div>
            }
        </div>
    </div>
</div>

@code {
    private string Email { get; set; }
    private string Password { get; set; }
    private string ErrorMessage { get; set; }

    private async Task HandleLogin()
    {
        // Clear previous error message
        ErrorMessage = string.Empty;

        try
        {
            // Attempt to sign in with email and password
            var response = await AuthService.SignInWithEmailAndPasswordAsync(Email, Password);

            // Log the successful login
            Console.WriteLine($"Login successful! Token: {response.IdToken}");

            // Navigate to dashboard or other page after successful login
            Navigation.NavigateTo("/dashboard");
        }
        catch (FirebaseAuthException firebaseEx)
        {
            // Log the exception details for debugging purposes
            Console.WriteLine($"FirebaseAuthException caught: {firebaseEx.Message}");
            Console.WriteLine($"Stack Trace: {firebaseEx.StackTrace}");

            // Firebase may return a generic message but include specific error codes
            if (firebaseEx.Message.Contains("INVALID_EMAIL"))
            {
                ErrorMessage = "The email address is invalid. Please check the format.";
                Console.WriteLine("Error: Invalid email format.");
            }
            else if (firebaseEx.Message.Contains("USER_NOT_FOUND"))
            {
                ErrorMessage = "No account found with this email. Please check your email address.";
                Console.WriteLine("Error: No account found with the provided email.");
            }
            else if (firebaseEx.Message.Contains("WRONG_PASSWORD"))
            {
                ErrorMessage = "Incorrect password. Please try again.";
                Console.WriteLine("Error: Incorrect password.");
            }
            else if (firebaseEx.Message.Contains("USER_DISABLED"))
            {
                ErrorMessage = "This account has been disabled. Please contact support.";
                Console.WriteLine("Error: Account is disabled.");
            }
            else
            {
                // Generic error message for all other cases
                ErrorMessage = "Login failed. Please check your credentials and try again.";
                Console.WriteLine($"Error: Login failed with message: {firebaseEx.Message}");
            }
        }
        catch (Exception ex)
        {
            // Handle any other non-Firebase related errors
            ErrorMessage = "Invalid Credentials. Please try again.";
            Console.WriteLine($"General Exception caught: {ex.Message}");
            Console.WriteLine($"Stack Trace: {ex.StackTrace}");
            StateHasChanged(); // Ensure UI updates
        }
    }

    private void NavigateToSignup()
    {
        // Navigate to the signup page if the user clicks "Create an account"
        Navigation.NavigateTo("/signup");
    }
}