@page "/notification"
@using AdminHomeSync.Components.Services
@using System.Globalization
@inject NotificationService NotificationService

<PageTitle>Notifications</PageTitle>

<div class="notification-page">
    <div class="notif-container">
        <p class="header">Notifications</p>
        <div class="messages-container">
            @if (notifications == null || !notifications.Any())
            {
                <p>Loading...</p>
            }
            else
            {
                @foreach (var notification in notifications)
                {
                    <div class="messages-box">
                        <p class="message">@notification.Message</p>
                        <p class="daydate">@notification.FullDateTime</p>
                    </div>
                }
            }
        </div>
    </div>
</div>

@code {
    private List<NotificationService.NotificationItem> notifications = new();

    // Parse the DateTime here in Notification.razor instead of NotificationService
    private DateTime ParseDateTime(string date, string time)
    {
        var combinedDateTime = $"{date} {time}";
        if (DateTime.TryParseExact(
        combinedDateTime,
        new[] { "MMMM d, yyyy h:mm tt", "MMM d, yyyy h:mm tt" },
        CultureInfo.InvariantCulture,
        DateTimeStyles.None,
        out DateTime parsedDateTime))
        {
            return parsedDateTime;
        }

        return DateTime.MinValue;
    }

    protected override async Task OnInitializedAsync()
    {
        try
        {
            // Fetch all notifications initially
            notifications = await NotificationService.GetAllNotificationsAsync();

            // Sort notifications by the latest date at the top
            SortNotifications();

            // Start listening for real-time updates
            NotificationService.ListenForAllNotifications(OnNewNotification);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading notifications: {ex.Message}");
        }
    }

    private void SortNotifications()
    {
        // Sort notifications by the latest date at the top
        notifications = notifications.OrderByDescending(n => ParseDateTime(n.Date, n.Time)).ToList();
    }

    private void OnNewNotification(NotificationService.NotificationItem notification)
    {
        InvokeAsync(() =>
        {
            // Insert the new notification at the top
            notifications.Insert(0, notification);

            // Sort notifications again to make sure the latest one is on top
            SortNotifications();

            // Refresh the UI
            StateHasChanged();
        });
    }
}
